;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; base
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; add elisp, conf, public_repos direcotyr in load-path
(defun add-to-load-path (&rest paths)
  (let (path)
    (dolist (path paths paths)
      (let ((default-directory
	      (expand-file-name (concat user-emacs-directory path))))
	(add-to-list 'load-path default-directory)
	(if (fboundp 'normal-top-level-add-subdirs-to-load-path)
	    (normal-top-level-add-subdirs-to-load-path))))))
;; call function
(add-to-load-path "elisp" "conf" "public_repos")

;; custom-file to "custom.el"
(setq custom-file (locate-user-emacs-file "custom.el"))
;; if custom-file not exist, create it.
(unless (file-exists-p custom-file)
  (write-region "" nil custom-file))
;; read custom-file
(load custom-file)

;; enable package.el
;; add Marmalade, MELPA to package repository
(require 'package)
(add-to-list
 'package-archives
 '("marmalade" . "https://marmalade-repo.org/packages/"))
(add-to-list
 'package-archives
 '("melpa" . "https://melpa.org/packages/"))
(package-initialize)

;; use init-loader.el
(require 'init-loader)
(init-loader-load "~/.emacs.d/conf")


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; keybinding
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; backspace -> "C-h"

(define-key key-translation-map (kbd "C-h") (kbd "<DEL>"))
;; forward-word -> "C-." / backward-word -> "C-,"
(define-key global-map (kbd "C-.") 'forward-word)
(define-key global-map (kbd "C-,") 'backward-word)
;; kill-word -> "C-u"
(define-key global-map (kbd "C-u") 'backward-kill-word)
;; kill-whole-line -> "C-k"
(define-key global-map (kbd "C-k") 'kill-whole-line)
;; forward-list -> "M-." / backward-word -> "M-,"
(define-key global-map (kbd "M-.") 'forward-list)
(define-key global-map (kbd "M-,") 'backward-list)
;; forward-sentence -> "M-n" / backward-sentence -> "M-p"
(define-key global-map (kbd "M-n") 'forward-paragraph)
(define-key global-map (kbd "M-p") 'backward-paragraph)


















