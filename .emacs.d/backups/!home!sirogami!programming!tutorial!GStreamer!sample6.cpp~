#include <string>

#include <gtk/gtk.h>
#include <gst/gst.h>
#include <gst/video/videooverlay.h>

#include <gdk/gdk.h>
#if defined (GDK_WINDOWING_X11)
#include <gdk/gdkx.h>
#elif define (GDK_WINDOWWING_WIN32)
#include <gdk/gdkwin32.h>
#elif define (GDK_WINDOWING_QUARTZ)
#include <gdk/gdkquartz.h>
#endif

struct CustomData
{
    GstElement *playbin;        // Our one and only pipeline

    GtkWidget *slider;           // Slider widget to keep track of current position
    GtkWidget *streams_list;     // Text widget to display info about the streams
    gulong slider_update_signal_id; // Signal ID for the slider update signal

    GstState state;             // Current state of the pipeline
    gint64 duration;            // Duration of the clip, in nanoseconds
};

static void realize_cb (GtkWidget *widget, CustomData *data)
{
    GdkWindow *window = gtk_widget_get_window(widget);
    guintptr window_handle;

    if (!gdk_window_ensure_native(window))
        g_error("Could't create native window needed for GstVideoOverlay!");

#if defined (GDK_WINDOWING_WIN32)
    window_handle = static_cast<guintptr>(GDK_WINDOW_HWND(window));
#elif defined (GDK_WINDOWING_QUARTZ)
    window_handle = gdk_quartz_window_nsview(window);
#elif defined (GDK_WINDOWING_X11)
    window_handle = GDK_WINDOW_XID(window);
#endif
    // Pass it to playbin, which implements VideoOverlay and will forward it to the video sink
    gst_video_overlay_set_window_handle(GST_VIDEO_OVERLAY(data->playbin), window_handle);
}

// This function is called when the PLAY button is clicked
static void play_cb(GtkButton *button, CustomData *data)
{
    gst_element_set_state(data->playbin, GST_STATE_PLAYING);
}
    
// This function is called when the PAUSE button is clicked
static void pause_cb(GtkButton *button, CustomData *data)
{
    gst_element_set_state(data->playbin, GST_STATE_PAUSED);
}

// This function is called when the STOP button is clied
static void stop_cb(GtkButton *button, CustomData *data)
{
    gst_element_set_state(data->playbin, GST_STATE_READY);
}

// This function is called when the main widnwo is closed
static void delete_event_cb(GtkWidget *widget, GdkEvent *event, CustomData *data)
{
    stop_cb(NULL, data);
    gtk_main_quit();
}

static gboolean draw_cb(GtkWidget *widget, cairo_t *cr, CustomData *data)
{


}

