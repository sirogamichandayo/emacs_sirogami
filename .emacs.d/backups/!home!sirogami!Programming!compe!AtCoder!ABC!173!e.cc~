//////////////////////////////
// Check before you submit!!!
// #define _ATCODER_LIBRARY

const long long MOD = 1e9+7;
// const long long MOD = 998244353;
/////////////////////////////

#include <bits/stdc++.h>
#ifdef _ATCODER_LIBRARY
#include <atcoder/all>
using namespace atcoder;
#endif
using namespace std;

#define DEBUG(x);
#ifdef _DEBUG
#define DEBUG(x) std::cerr << #x << " : " << (x) << std::endl;
#define GLIBCXX_DEBUG
#define GLIBCXX_DEBUG_PEDANTIC
#endif

const long long INF = 1LL << 60;
using ll = long long;
using P = pair<ll, ll>;

#define FOR(i,a,b) for (ll i=(a);i<(ll)(b);++i)
#define REP(i,n) FOR(i,0,n)
#define ALL(v) (v).begin(),(v).end()
template<typename T>istream& operator>>(istream&i,vector<T>&v)
{REP(j,v.size())i>>v[j];return i;}
template<typename T>string join(vector<T>&v)
{stringstream s;REP(i,v.size())s<<' '<<v[i];return s.str().substr(1);}
template<typename T>ostream& operator<<(ostream&o,vector<T>&v)
{if(v.size())o<<join(v);return o;}
template<typename T1,typename T2>istream& operator>>(istream&i,pair<T1,T2>&v)
{return i>>v.fi>>v.se;}
template<typename T1,typename T2>ostream& operator<<(ostream&o,pair<T1,T2>&v)
{return o<<v.fi<<","<<v.se;}

int dx[4]{0, 1, 0, -1};
int dy[4]{1, 0, -1, 0};

template<typename T> class Dinic {
private:
	int V;
	vector<int> level,iter;
	void bfs(int s) {
		fill(level.begin(),level.end(),-1);
		queue<int> que;
		level[s] = 0;
		que.push(s);
		while(!que.empty()){
			int v = que.front();
			que.pop();
			for(auto& e : G[v]){
				if(e.cap > 0 && level[e.to] < 0){
					level[e.to] = level[v] + 1;
					que.push(e.to);
				}
			}
		}
	}
	T dfs(int v,int t,T f) {
		if(v==t){
			return f;
		}
		for(int& i = iter[v]; i < (int)G[v].size(); i++){
			edge& e = G[v][i];
			if(e.cap > 0 && level[v] < level[e.to]){
				T d = dfs(e.to,t,min(f,e.cap));
				if(d > 0){
					e.cap -= d;
					G[e.to][e.rev].cap += d;
					return d;
				}
			}
		}
		return 0;
	}
     
public:
	struct edge{
		int to;
		T cap;
		int rev;
	};
	vector<vector<edge> > G;
     
	Dinic(int node_size) : V(node_size), level(V), iter(V), G(V){}
	// Adding edge on a node.
	void add_edge(int from,int to,T cap) {
		G[from].push_back((edge){to,cap,(int)G[to].size()});
		G[to].push_back((edge){from,(T)0,(int)G[from].size()-1});
	}
	// Calculate the maximum flow.
	T solve(int s,int t) {
		T flow = 0;
		for(;;){
			bfs(s);
			if(level[t] < 0) return flow;
			fill(iter.begin(),iter.end(),0);
			T f;
			while((f=dfs(s,t,numeric_limits<T>::max())) > 0){
				flow += f;
			}
		}
	}
};


///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////


int main(int argc, char **argv)
{
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	Dinic<int> di(110);
	ll n, g, e; cin >> n >> g >> e;
	REP(i, g)
	{
		ll a; cin >> a;
		di.add_edge(a, 105, 1);
	}
	REP(i, e)
	{
		ll a, b; cin >> a >> b;
		di.add_edge(a, b, 1);
		di.add_edge(b, a, 1);
	}
	
	std::cout << di.solve(0, 105) << std::endl;
	return 0;
}
