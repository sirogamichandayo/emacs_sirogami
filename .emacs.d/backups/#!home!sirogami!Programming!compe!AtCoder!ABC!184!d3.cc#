    #include<bits/stdc++.h>
    #include<atcoder/all>
     
    #define rep(i, n) for (long long i = 0; i < (long long)(n); i++)
    #define REP(i, n) for (long long i = 1; i <= (long long)(n); i++)
    #define FOR(i,x,n,r) for(long long i = x; i< (long long)(n); i+=r)
    #define afor(a,t) for(auto a:t)
    #define all(v) v.begin(), v.end()
    #define rall(v) v.rbegin(), v.rend()
    template<class T> inline bool chmax(T& a, T b) { if (a < b) { a = b; return 1; } return 0; }
    template<class T> inline bool chmin(T& a, T b) { if (a > b) { a = b; return 1; } return 0; }
    using namespace std;
    using namespace atcoder;
    using ll = long long;
    using pi = pair<int, int>;
    ll pows(ll x, ll n) { ll ret = 1; while (n > 0) { if (n & 1) ret *= x; x *= x; n >>= 1; }return ret; }
    const int INF = 1 << 20;
    int main() {
    	int h, w;
    	cin >> h >> w;
    	vector<string>grid(h);
    	vector<vector<ll>> ans(h,vector<ll>(w,INF));
    	rep(i, h)cin >> grid[i];
     
    	queue<pi>q;
    	vector<vector<pi>>warp(256);
     
    	rep(i,h)rep(j,w){
    		if(grid[i][j] == 'S'){
    			q.push(pi(i,j));
    			ans[i][j] = 0;
    		}
    		warp[grid[i][j]].push_back(pi(i,j));
    	}
    	while (!q.empty()) {
    		auto [ih,iw] = q.front(); q.pop();
    		if(grid[ih][iw] == 'G'){
				// for (ll i = 0; i < h; ++i)
				// {
				// 	for (ll j = 0; j < w; ++j)
				// 		std::cout << ans[i][j]<< " ";
				// 	std::cout << std::endl;
				// }
    			cout << ans[ih][iw] << endl;
    			return 0;
    		}
    		for (int i = -1; i < 2; i++)for (int j = -1; j < 2; j++) {
    			if (abs(i) == abs(j))continue;
    			int dh = ih + i, dw = iw + j;
    			if(dh < 0 || h <= dh || dw < 0 || w <= dw)continue;
    			if (grid[dh][dw] == '#' || ans[dh][dw] != INF)continue;
    			q.push(pi(dh, dw));
    			ans[dh][dw] = ans[ih][iw] + 1;
    		}
    		if(islower(grid[ih][iw])){
    			for(auto p:warp[grid[ih][iw]]){
    				auto [h,w] = p;
    				if(h == ih && w == iw)continue;
					// assert(ans[h][w] == INF);
    				ans[h][w] = ans[ih][iw]+1;
    				q.push(pi(h,w));
    			}
    			warp[grid[ih][iw]].clear();
    		}
    	}
    	cout << -1 << endl;
    	return 0;
    }
     
     
