struct Comb
{
	const long long mod;
	vector<long long> fac, ifac, inv;

	Comb(long long n, long long m) : mod(m)
	{
		fac.resize(n+1);
		ifac.resize(n+1);
		inv.resize(n+1);
		
		fac[0] = fac[1] = 1;
		ifac[0] = ifac[1] = 1;
		inv[1] = 1;
		
		for (long long i = 2; i <= n; ++i)
		{
			(fac[i] = fac[i-1] * i) %= mod;
			(inv[i] = mod - inv[mod%i] * (mod/i)) %= mod;
			(ifac[i] = ifac[i-1] * inv[i]) %= mod;
		}
	}

	// a_C_b 
	//      a!
	// = -------- 
	//   b!(a-b)!
	// = a! * (b!)^(-1) * ((a-b)!)^(-1)
	// = fac[a] * ifac[b] * ifac[a-b]
	long long comb(long long a, long long b)
	{ 
		if(a == 0 && b == 0)return 1;
		if(a < b || a < 0)return 0;
		long long tmp = ifac[a-b]* ifac[b] % mod;
		return tmp * fac[a] % mod;
	}
};
