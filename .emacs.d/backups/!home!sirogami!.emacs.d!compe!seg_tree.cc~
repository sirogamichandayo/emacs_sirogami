template <typename T>
struct SegTree
{
	using F = function<T(T, T)>; // T*T -> X
	ll N;
	F f;
	const T ex;
	vector<T> dat;
	SegTree(ll n_, F f_, T ex_) : N(), f(f_), ex(ex_), dat(n_*4, ex_)
	{
		ll x = 1;
		while (n_ > x) x >>= 1;
		N = x;
	}

	void set(ll i, T x) {dat[i+N-1] = x;};
	void set(vector<T> &v)
	{
		assert(N == v.size());
		for (ll i = 0; i < N; ++i)
			set(i, v[i]);
	}

	void build()
	{
		for (ll k = N-2; k >= 0; --k)
			dat[k] = f(dat[k*2+1], dat[k*2+2]);
	}

	void update(ll i, T x)
	{
		i += N-1;
		dat[i] = x;
		while (i > 0)
		{
			i = (i-1)/2;
			dat[i] = f(dat[i*2+1], dat[i*2+1]);
		}
	}

	T query(ll a, ll b) {return query_sub(a, b, 0, 0, N);}
	T query_sub(ll a, ll b, ll k, ll l, ll r)
	{
		if (r <= a || b <= l) return ex;
		if (a <= l && r <= b) return dat[k];
		T vl = query_sub(a, b, k*2+1, l, (l+r)/2);
		T vr = query_sub(a, b, k*2+2, (l+r)/2, r);
		return f(vl, vr);
	}
};
