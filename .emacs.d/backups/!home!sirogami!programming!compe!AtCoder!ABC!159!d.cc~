#include <bits/stdc++.h>
using namespace std;
using ll = long long;

const ll M = 998244353;

vector<ll> fac(300001); //n!(mod M)
vector<ll> ifac(300001); //k!^{M-2} (mod M)
//a,bの範囲的にこれだけ配列を用意していけば十分

ll mpow(ll x, ll n){ //x^n(mod M) ←普通にpow(x,n)では溢れてしまうため，随時mod計算
    ll ans = 1;
    while(n != 0){
        if(n&1) ans = ans*x % M;
        x = x*x % M;
        n = n >> 1;
    }
    return ans;
}

ll comb(ll a, ll b){ //aCbをmod計算
    if(a == 0 && b == 0)return 1;
    if(a < b || a < 0)return 0;
    ll tmp = ifac[a-b]* ifac[b] % M;
    return tmp * fac[a] % M;
}

int main(int argc, char **argv)
{
	ll N; cin >> N;
	vector<ll> V(N); for (ll i = 0; i < N; ++i) cin >> V[i];

	vector<ll> sum(N, 0);
	for (ll i = 0; i < N; ++i)
		++sum[V[i]];

    fac[0] = 1;
    ifac[0] = 1;
    for(ll i = 0; i<300000; i++){
        fac[i+1] = fac[i]*(i+1) % M; // n!(mod M)
        ifac[i+1] = ifac[i]*mpow(i+1, M-2) % M; // k!^{M-2} (mod M) ←累乗にmpowを採用
    }

	for (ll i = 0; i < N; ++i)
	{
		ll num = sum[V[i]];
		std::cout << comb(num-1, 2) << std::endl;
	}
}
