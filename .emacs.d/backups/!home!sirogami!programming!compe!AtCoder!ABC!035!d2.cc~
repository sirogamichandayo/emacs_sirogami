#include <bits/stdc++.h>
using namespace std;
using ll = long long;
using pint = pair<ll, ll>;

constexpr ll INF = 1e9+10;
struct grid{ll to; ll cost;};

using Graph = vector<vector<grid>>;

int main(int argc, char **argv)
{
	ll N, M, T; cin >> N >> M >> T;
	vector<ll> A(N); for (ll i = 0; i < N; ++i) cin >> A[i];

	Graph GO_G(N), BACK_G(N);
	for (ll i = 0; i < M; ++i)
	{
		ll a, b, c; cin >> a >> b >> c; --a, --c;
		GO_G[a].push_back(grid{b, c});
		BACK_G[b].push_back(grid{a, c});
	}

	priority_queue<pint, vector<pint>, greater<pint>> que;
	vector<ll> dist_go(N, -INF);
	que.push(pint(0, 0));

	while (!que.empty())
	{
		pint p = que.top(); que.pop();
		ll v = p.second;
		if (dist_go[v] < p.first) continue;

		for (auto &nv : GO_G[v])
		{
			if (dist_go[nv.to] > dist_go[v] + nv.cost)
			{
				dist_go[nv.to] = dist_go[v] + nv.cost;
				que.push(pint(dist_go[nv.to], nv.to));
			}
		}
	}

	vector<ll> dist_back(N, -INF);
	que.push(pint(0, 0));

	while (!que.empty())
	{
		pint p = que.top(); que.pop();
		ll v = p.second;
		if (dist_back[v] < p.first) continue;

		for (auto &nv : BACK_G[v])
		{
			if (dist_back[nv.to] > dist_back[v] + nv.cost)
			{
				dist_back[nv.to] = dist_back[v] + nv.cost;
				que.push(pint(dist_back[nv.to], nv.to));
			}
		}
	}

	ll res{0};
	for (ll i = 0; i < N; ++i)
	{
		res = max(res, (T - dist_go[i] - dist_back[i]) * A[i]);
	}
	std::cout << res << std::endl;
}
