#include <gst/gst.h>

typedef struct _CustomData
{
    GstElement *src, *sink, *pipeline, *convert;
    gboolean terminate;
}CustomData;

static void handle_message(CustomData *data, GstMessage *msg)
{
    GError *err;
    gchar *debug_info;

    switch (GST_MESSAGE_TYPE(msg))
    {
    case GST_MESSAGE_ERROR:
        gst_message_parse_error(msg, &err, &debug_info);
        g_printerr("Error received from element %s: %s\n", GST_OBJECT_NAME(msg->src), err->message);
        g_printerr("Dubugging information: %s\n", debug_info ? debug_info : "none");
        g_clear_error(&err);
        g_free(debug_info);
        data->terminate = FALSE;
        break;
    default:
        /* We should not reach here */
        g_printerr("Unexpected message received.\n");
        break;
    }
}


int main(int argc, char **argv)
{
    CustomData data;
    GstBus *bus;
    GstMessage *msg;
    GstStateChangeReturn ret;

    data.terminate = FALSE;

    /* Initialize GStreamer */
    gst_init(&argc, &argv);

    /* Create the element */
    data.src = gst_element_factory_make("decklinkvideosrc", "decklink_src");
    data.convert = gst_element_factory_make("videoconvert", "decklink_convert");
    data.sink = gst_element_factory_make("autovideosink", "decklink_sink");

    if (!data.src || !data.sink)
    {
        g_printerr("Not all elements could be created.\n");
        exit(-1);
    }

    data.pipeline = gst_pipeline_new("decklink-pipeline");

    /* Build the pipeline */
    gst_bin_add_many(GST_BIN(data.pipeline), data.src, data.sink, data.convert, NULL);
    if (gst_element_link_many(data.src, data.convert, data.sink, NULL) != TRUE)
    {
        g_printerr("Not all elements could be linked.");
        exit(-1);
    }

    //    g_object_set(data.src, "connection", 2, "mode", 20, NULL);
    gboolean is_exist_signal = FALSE;
    g_object_get(data.src, "signal", is_exist_signal, NULL);

    if (is_exist_signal)
    {
        g_print("Exist signal!\n");
    }
    else
    {
        g_printerr("Not exist signal.\n");
        exit(-1);
    }

    /* Start playing */
    ret = gst_element_set_state(data.pipeline, GST_STATE_PLAYING);
    if (ret == GST_STATE_CHANGE_FAILURE)
    {
        g_printerr("Unable to set the pipeline to the playing state.\n");
        gst_object_unref(data.pipeline);
        exit(-1);
    }

    /* Listen to the bus */
    bus = gst_element_get_bus(data.pipeline);
    do
    {
        msg = gst_bus_timed_pop_filtered(bus, GST_MSECOND,
                                         GST_MESSAGE_ERROR);
        if (msg != NULL)
        {
            handle_message(&data, msg);
        } 
    } while (!data.terminate);

    /* Free resources */
    gst_object_unref(bus);
    gst_element_set_state(data.pipeline, GST_STATE_NULL);
    gst_object_unref(data.pipeline);
    return 0;
}
