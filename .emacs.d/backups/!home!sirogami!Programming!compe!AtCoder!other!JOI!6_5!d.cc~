//////////////////////////////
// Check before you submit.
// #define _ATCODER_LIBRARY

const long long MOD = 1e9+7;
// const long long MOD = 998244353;

/////////////////////////////
#include <bits/stdc++.h>
using namespace std;
#include <boost/multiprecision/cpp_int.hpp>
using namespace boost::multiprecision;

#ifdef _ATCODER_LIBRARY
#include <atcoder/all>
using namespace atcoder;
#endif
// _ATCODER_LIBRARY

const long long INF = 1LL << 60;
const double PI = acos(-1);
using ll = long long;
using P = pair<ll, ll>;


#define FOR(i,a,b) for (ll i=(a);i<(ll)(b);++i)
#define REP(i,n) FOR(i,0,n)
#define ALL(v) (v).begin(),(v).end()
#define SUM(v) accumulate(ALL(v),0ll)

template<typename T>istream& operator>>(istream&i,vector<T>&v){REP(j,v.size())i>>v[j];return i;}
template<typename T>string join(vector<T>&v){stringstream s;REP(i,v.size())s<<' '<<v[i];return s.str().substr(1);}
template<typename T>ostream& operator<<(ostream&o,vector<T>&v){if(v.size())o<<join(v);return o;}
template<typename T>string join(vector<vector<T>>&vv){string s="\n";REP(i,vv.size())s+=join(vv[i])+"\n";return s;}
template<typename T>ostream& operator<<(ostream&o,vector<vector<T>>&vv){if(vv.size())o<<join(vv);return o;}
template<typename T1,typename T2>istream& operator>>(istream&i,pair<T1,T2>&v){return i>>v.first>>v.second;}
template<typename T1,typename T2>ostream& operator<<(ostream&o,pair<T1,T2>&v){return o<<v.first<<","<<v.second;}

#define DEBUG(x);

#ifdef _DEBUG
#define DEBUG(x) std::cerr << #x << " : " << (x) << std::endl;
#define GLIBCXX_DEBUG
#define GLIBCXX_DEBUG_PEDANTIC
#endif
// _DEBUG

int dx[4]{0, 1, 0, -1};
int dy[4]{1, 0, -1, 0};

void init_init_init() {ios_base::sync_with_stdio(false);cin.tie(NULL);std::cout<<fixed<<setprecision(10);}
template<class T>T up(T a, T b){assert(b);return (a+b-1)/b;}
template<typename... A>bool eq(A const&... a){auto t={a...};assert(t.size());auto tar=*t.begin();for(const auto&e:t)if(tar!=e)return false;return true;}

template<class T>bool chmin(T &a, T b){if(a>b){a=b;return false;}return true;}
template<class T>bool chmax(T &a, T b){if(a<b){a=b;return false;}return true;}
template<class T>bool chmax(T &a, initializer_list<T>l){return chmax(a,max(l));}
template<class T>bool chmin(T &a, initializer_list<T>l){return chmin(a,min(l));}

//////////////////////////////////////////////////////////////////
// My Library
//////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////
// Contest Code
//////////////////////////////////////////////////////////////////



int main(int argc, char **argv)
{
	init_init_init();

	ll K, N, M; cin >> K >> N >> M;
	vector<ll> P(K); cin >> P;
	auto PP = P;
	sort(ALL(PP));
	multiset<ll> s;
	REP(i, K) s.insert(P[i]);
	multiset<ll> s1;
	REP(i, K)
		s1.insert(P[i]+100*(N-M));

	if (K == 1)
	{
		std::cout << 1 << std::endl;
		std::cout << "--------" << std::endl;
		std::cout << 1 << std::endl;
		return 0;
	}

	DEBUG(s.size());
	DEBUG(s1.size());
	auto isok1 = [&](ll ind) -> bool
				 {
					 ll t = PP[ind]+100*(N-M);
					 assert(s1.find(t) != s1.end());
					 s1.erase(s1.find(t));
					 ll si = distance(s1.lower_bound(PP[ind]), s1.end())+1;
					 s1.insert(t);

					 return si*12 >= K;
				 };

	auto isok2 = [&](ll ind) -> bool
				 {
					 ll t = PP[ind];
					 assert(s.find(t) != s.end());
					 s.erase(s.find(t));
					 ll si = distance(s.lower_bound(PP[ind]+100*(N-M)), s.end());
					 if (N == M) ++si;
					 s.insert(t);

					 return si*12 >= K;
				 };

	ll ok1{-1}, ng{K};
	while (ng - ok1 > 1)
	{
		ll mi = (ok1+ng)/2;
		if (isok1(mi)) ok1 = mi;
		else ng = mi;
	}


	ll ok2{-1};
	ng = K;
	while (ng - ok2 > 1)
	{
		ll mi = (ok2+ng)/2;
		if (isok2(mi)) ok2 = mi;
		else ng = mi;
	}
	DEBUG(PP[ok1]);
	DEBUG(PP[ok2]);

	bool is{true};
	if (PP[ok1] == PP.back())
	{
		ll cnt{0};
		REP(i, K-1)
		{
			if (PP[i]+100*(N-M)>=PP.back()+1)
				++cnt;
		}

		DEBUG(cnt);
		if (cnt*12>=K) is = false;
	}
	if (is)
	{
		REP(i, K)
			if (P[i] >= PP[ok1])
				std::cout << i+1 << std::endl;
	}
	
	std::cout << "--------" << std::endl;
	REP(i, K)
	{
		if (P[i] >= PP[ok2])
			std::cout << i+1 << std::endl;
	}
}
