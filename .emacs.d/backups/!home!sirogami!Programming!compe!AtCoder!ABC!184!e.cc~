//////////////////////////////
// Check before you submit.
// #define _ATCODER_LIBRARY

const long long MOD = 1e9+7;
// const long long MOD = 998244353;

/////////////////////////////
#include <bits/stdc++.h>
using namespace std;
#include <boost/multiprecision/cpp_int.hpp>
using namespace boost::multiprecision;

#ifdef _ATCODER_LIBRARY
#include <atcoder/all>
using namespace atcoder;
#endif
// _ATCODER_LIBRARY

const long long INF = 1LL << 60;
const double PI = acos(-1);
using ll = long long;
using P = pair<ll, ll>;


#define FOR(i,a,b) for (ll i=(a);i<(ll)(b);++i)
#define REP(i,n) FOR(i,0,n)
#define ALL(v) (v).begin(),(v).end()
#define SUM(v) accumulate(ALL(v),0ll)

template<typename T>istream& operator>>(istream&i,vector<T>&v){REP(j,v.size())i>>v[j];return i;}
template<typename T>string join(vector<T>&v){stringstream s;REP(i,v.size())s<<' '<<v[i];return s.str().substr(1);}
template<typename T>ostream& operator<<(ostream&o,vector<T>&v){if(v.size())o<<join(v);return o;}
template<typename T>string join(vector<vector<T>>&vv){string s="\n";REP(i,vv.size())s+=join(vv[i])+"\n";return s;}
template<typename T>ostream& operator<<(ostream&o,vector<vector<T>>&vv){if(vv.size())o<<join(vv);return o;}
template<typename T1,typename T2>istream& operator>>(istream&i,pair<T1,T2>&v){return i>>v.first>>v.second;}
template<typename T1,typename T2>ostream& operator<<(ostream&o,pair<T1,T2>&v){return o<<v.first<<","<<v.second;}

#define DEBUG(x);

#ifdef _DEBUG
#define DEBUG(x) std::cerr << #x << " : " << (x) << std::endl;
#define GLIBCXX_DEBUG
#define GLIBCXX_DEBUG_PEDANTIC
#endif
// _DEBUG

int dx[4]{0, 1, 0, -1};
int dy[4]{1, 0, -1, 0};

void init_init_init() {ios_base::sync_with_stdio(false);cin.tie(NULL);std::cout<<fixed<<setprecision(10);}
template<class T>T up(T a, T b){assert(b);return (a+b-1)/b;}
template<typename... A>bool eq(A const&... a){auto t={a...};assert(t.size());auto tar=*t.begin();for(const auto&e:t)if(tar!=e)return false;return true;}

template<class T>bool chmin(T &a, T b){if(a>b){a=b;return false;}return true;}
template<class T>bool chmax(T &a, T b){if(a<b){a=b;return false;}return true;}
template<class T>bool chmax(T &a, initializer_list<T>l){return chmax(a,max(l));}
template<class T>bool chmin(T &a, initializer_list<T>l){return chmin(a,min(l));}

//////////////////////////////////////////////////////////////////
// My Library
//////////////////////////////////////////////////////////////////



//////////////////////////////////////////////////////////////////
// Contest Code
//////////////////////////////////////////////////////////////////

ll dist[2010][2010];
char grid[2010][2010];
set<char> se;

int main(int argc, char **argv)
{
	init_init_init();
	
	ll H, W; cin >> H >> W;
	map<char, vector<P>> mp;
	REP(h, H)REP(w, W)
	{
		char c; cin >> c;
		mp[c].push_back({h, w});
		grid[h][w] = c;
		dist[h][w] = INF;
	}

	using PP = pair<ll, P>;
	priority_queue<PP, vector<PP>, greater<PP>> que;
	que.push({0, {0, 0}});
	dist[0][0] = 0;

	while (que.size())
	{
		auto [d, coo] = que.top();
		auto [h, w] = coo;
		que.pop();
		if (dist[h][w] < d) continue;

		REP(i, 4)
		{
			ll hh = h + dy[i];
			ll ww = w + dx[i];
			if (hh < 0 or hh >= H or ww < 0 or ww >= W) continue;
			if (grid[hh][ww] == '#') continue;
			if (dist[hh][ww] > d + 1)
			{
				dist[hh][ww] = d+1;
				que.push({d+1, {hh, ww}});
			}
		}

		if (grid[h][w] == '.')  continue;
		if (se.count(grid[h][w])) continue;
		se.insert(grid[h][w]);
		for (auto [hh, ww] : mp[grid[h][w]])
		{
			if (hh == h and ww == w)continue;
			if (dist[hh][ww] > d + 1)
			{
				dist[hh][ww] = d+1;
				que.push({d+1, {hh, ww}});
			}
		}
	}

	if (dist[H-1][W-1] == INF)
	{
		std::cout << -1 << std::endl;
		return 0;
	}
	std::cout << dist[H-1][W-1] << std::endl;
	
}
