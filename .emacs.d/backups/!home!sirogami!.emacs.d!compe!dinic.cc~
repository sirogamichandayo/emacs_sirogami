struct edge

{
	long long to, cap, rev;
};

constexpr long long MAX_V = 100;
long long level[MAX_V];
long long iter[MAX_V];
vector<edge> G[MAX_V];

void addEdge(long long from, long long to, long long cap)
{
	G[from].push_back((edge){to, cap, G[to].size()});
	G[to].push_back((edge){from, 0, G[from].size()-1});
}

void bfs(long long s)
{
	memset(level, -1, sizeof level);
	queue<long long> que;
	level[s] = 0;
	que.push(s);
	while (!que.empty())
	{
		long long v = que.front(); que.pop();
		REP(i, G[v].size())
		{
			edge &e = G[v][i];
			if (e.cap > 0 && level[e.to] < 0)
			{
				level[e.to] = level[v] + 1;
				que.push(e.to);
			}
		}
	}
}

long long dfs(long long v, long long t, long long f)
{
	if (v == t) return f;

	for (long long &i = iter[v]; i < G[v].size(); ++i)
	{
		edge &e = G[v][i];

		if (e.cap > 0 && level[v] < level[e.to])
		{
			long long d = dfs(e.to, t, min(f, e.cap));
			if (d > 0)
			{
				e.cap -= d;
				G[e.to][e.rev].cap += d;
				return d;
			}
		}
	}
	return 0;
}

long long maxFlow(long long s, long long t)
{
	long long flow{0};
	while (true)
	{
		bfs(s);
		if (level[t] < 0) return flow;
		memset(iter, 0, sizeof iter);
		long long f;
		while ((f = dfs(s, t, INF)) > 0)
			flow += f;
	}
}
